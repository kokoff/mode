
context Identifiable{

	//FIELDS
	
	// Requirement id should be unique.
	constraint UniqueId{
		
		guard : not self.~idChecked.isDefined()
				
		check {
				
				var duplicates = Identifiable.allInstances().select(r|r.id == self.id and r <> self );
				
				for (i in duplicates){
					i.~idChecked=true;
				}
				
				return duplicates.isEmpty();
				
		}
				
		message :  "The id of " + self.type().name + " " + self.id + " is not unique."
		
		fix {
			title : "Generate unique ids for all duplicates!"
			
			do{
				for (duplicate in duplicates){
					var i = 1;
					var type = duplicate.type().name.asString();
					var id = duplicate.type().name.asString() + i.asString();
					
					while (Identifiable.allInstances().
							exists(r|r.id == id))	{
							i = i+1;
							id = type + i.asString();
					}
					duplicate.id = id;
				}
				
			}
		}
	}	
}


context Requirement{
	
	// Requirement description should be at least 10 characters long.
	constraint RequirementDescriptionLength{
		check : self.description.length() > 10
		
		message : "Description of requirement " + self.id + " is not at least 10 characters long." 
	}
	
	// Progress must be between 0 and 100 %.
	constraint ProgressIsPercentage{
		guard : self.children.isEmpty()
	
		check : self.progress >=0 and
				self.progress <= 100
				
		message : "Progress of requirement " + self.id + " is not a valid percantage (0 <= progress <= 100)."
		
		fix {
			title : "Round to nearest valid percentage (0 or 100)"
			
			do {
				if (self.progress < 0){
					self.progress = 0;
				}
				else if (self.progress > 100){
					self.progress = 100;
				}
			}
		}
	}
	

	
	// There are no conflicting requirements with common ancestors.
	constraint NoConflictsShareAncestor{
		
		check { 
			var ancestors = self.ancestors();	// collect all ancestors
			
			// incoming conflicting requirements which have a common ancestor and have not been checked
			var invalidIncomingConflicts = self.conflictsIncoming.select(d| 
			d.hasCommonAncestor(ancestors) and not d.~conflictsChecked.isDefined()
			).asSet(); 
			
			// outgoing conflicting requirements which have a common ancestor and have not been checked
			var invalidOutgoingConflicts = self.conflictsOutgoing.select(d| 
			d.hasCommonAncestor(ancestors) and not d.~conflictsChecked.isDefined()
			).asSet();
			
			//self.~conflictsChecked = true;
			
			return invalidIncomingConflicts.isEmpty() and
			invalidOutgoingConflicts.isEmpty();
		}
				
		message : "Requirement " + self.id + " cannot be in conflict with the requirements in the " +
				invalidIncomingConflicts.includingAll(invalidOutgoingConflicts).
				collect(r|r.id).asString() +
				" because they share common ancestors."
				
		fix {
			title : "Remove problematic conflicts"
			
			do {
				self.conflictsIncoming.removeAll(invalidIncomingConflicts);
				self.conflictsOutgoing.removeAll(invalidOutgoingConflicts);
			}
		}
	}
	
	// The disjunctive union of the sets of children of two conflicting requirements must not be empty
	constraint disjunctiveUnionNotEmpty{
		
		check {
				var descendants = self.descendants();	// collect all descendants
				
				// incoming conflicting requirements which have an empty disjunctive union of children
				var invalidIncomingConflicts = self.conflictsIncoming.select(d| 
				d.disjunctiveUnionOfDescendantsIsEmpty(descendants) and not d.~conflictsChecked.isDefined()
				).asSet(); 
				
				// outgoing conflicting requirements which have an empty disjunctive union of children
				var invalidOutgoingConflicts = self.conflictsOutgoing.select(d| 
				d.disjunctiveUnionOfDescendantsIsEmpty(descendants) and not d.~conflictsChecked.isDefined()
				).asSet();
				
				self.~conflictsChecked = true;
				
				return invalidIncomingConflicts.isEmpty() and
				invalidOutgoingConflicts.isEmpty();
			}
				
		message : "Requirement " + self.id + " cannot be in conflict with the requirements in the " +
				invalidIncomingConflicts.includingAll(invalidOutgoingConflicts).
				collect(r|r.id).asString() +
				" because their dijunctive union of descendants is empty."
				
		fix {
			title : "Remove problematic conflicts"
			
			do {
				self.conflictsIncoming.removeAll(invalidIncomingConflicts);
				self.conflictsOutgoing.removeAll(invalidOutgoingConflicts);
			}
		}
	}
	
	
	// Conflicting requirements cannot be both have 100% progress
	constraint CompletedConflicts{
	
		guard : self.progress == 100 and 
				self.satisfies("disjunctiveUnionNotEmpty") and self.satisfies("NoConflictsShareAncestor")
	
		check {
				// incoming conflicting requirements which are also at 100% progress
				var invalidIncomingConflicts = self.conflictsIncoming.select(c|
				c.progress == 100 and not c.~conflictsChecked.isDefined()
				).asSet();
				
				// outgoing conflicting requirements which are also at 100% progress
				var invalidOutgoingConflicts = self.conflictsOutgoing.select(c|
				c.progress == 100 and not c.~conflictsChecked.isDefined()
				).asSet();
				
				self.~conflictsChecked = true;
				
				return invalidIncomingConflicts.isEmpty() and
				invalidOutgoingConflicts.isEmpty();
			}
				
		message : "Requirement " + self.id + " cannot be in conflict with the requirements in the " +
				invalidIncomingConflicts.includingAll(invalidOutgoingConflicts).
				collect(r|r.id).asString() +
				" because they are all at 100% progress which condradicts the definition of a conflict."
				
		fix {
			title : "Remove problematic conflicts"
			
			do {
				self.conflictsIncoming.removeAll(invalidIncomingConflicts);
				self.conflictsOutgoing.removeAll(invalidOutgoingConflicts);
			}
		}
	}

	

	//DEPENDENCIES
	
	// There cannot be any loops in children including self referential children.
	constraint DependencyLoops {
		check : self.descendants().excludes(self)
		
		message : "Requirement " + self.id + " is part of a dependency loop!"
	}
}



context SystemRequirement{

	// System Requirements cannot be root nodes.
	constraint SystemRootNodes{
		check : self.parents.notEmpty()
		
		message : "Requiremwnt " + self.id + " must be a descendant of a CustomerRequirement!"
		
		fix{
			title : "Remove requirement " + self.id
			
			do {
				self.eContainer().requirements.remove(self);
			}
		}
	}
	
	// System requirements cannot be parents of Customer Requirements
	constraint SystemParentOfCustomer {
		check { var customerChildren = self.children.select(r|
				r.type().name = 'CustomerRequirement');
				return customerChildren.isEmpty();			
			  }
	
		message : "Requiremwnt " + self.id + " cannot be a parent of the customer requirements in the " +
					customerChildren.collect(r|r.id).asString()
					
		fix{
			title : "Remove customer requirements from children"
			
			do { 
				self.children.removeAll(customerChildren);
			}
		}
	}
}

	
context CustomerRequirement{

	// Customer Requirements cannot be leaf nodes.
	constraint CustomerLeafNodes{
		check : self.children.notEmpty()
		
		message : "Customer requirement " + self.id + " must have at least one system requirement descendant!" 
		
		fix {
			title : "Remove requirement " + self.id
			
			do {
				self.eContainer().requirements.remove(self);
			}
		}
	}
}



context TestCase{

	// Each test case verifies at least one system requirement
	constraint VerifiesAtLeastOne{
		check : self.requirements.notEmpty()
		
		message : "Test case " + self.id + " needs to verify at least one system requirement!"
		
		fix {
			title : "Remove test case " + self.id
			
			do{
				self.eContainer().testCases.remove(self);
			}
		}
	}
	
	// A test case cannot verrify non leaf requirements
	constraint VerifyOnlyLeafRequirements{
		
		check {
			var nonLeafRequirements = self.requirements.select(r|r.children.notEmpty());
			return nonLeafRequirements.isEmpty();
		}
		
		message : "Test case " + self.id + " cannot verify a non leaf requirement."
					
		fix {
			title : "Remove all non leaf requirement from test case"
			
			do {
				self.requirements.removeAll(nonLeafRequirements);
			}
		}
	}
}




context TeamMember{

	// A team member cannot be assigned a non leaf requirements
	constraint AssignedOnlyLeafRequirements{
		
		check {
			var nonLeafRequirements = self.requirements.select(r|r.children.notEmpty());
			return nonLeafRequirements.isEmpty();
		}
		
		message : "Team member " + self.id + " cannot be assigned a non leaf requirement."
					
		fix {
			title : "Remove all non leaf requirements assigned to team member"
			
			do {
				self.requirements.removeAll(nonLeafRequirements);
			}
		}
	}

}

operation Requirement disjunctiveUnionOfDescendantsIsEmpty(otherDescendants){
	var descendants = self.descendants(); 
	return descendants.containsAll(otherDescendants) or otherDescendants.containsAll(descendants);
}

operation Requirement descendants(){
	return self.closure(r|r.children);
}

operation Requirement ancestors(){
	return self.closure(r|r.parents);
}

operation Requirement hasCommonAncestor(otherAncestors){
			return not self.ancestors().including(self).
			excludesAll(otherAncestors);
}

