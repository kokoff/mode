@namespace(URI="http://requirements", prefix="")
package Y1403115;


@gmf.diagram
class Model{
	val TestCase[*] testcases;
	val TeamMember[*] teamMembers;
	val Requirement[*] requirements;
}


@gmf.node(label="id")
abstract class Identifiable {
	attr String ~id;
}
	
abstract class Describable{
	@gmf.label()
	attr String description="The description goes here.";
}


abstract class Requirement extends Identifiable, Describable{
	@gmf.label()
	attr Integer progress=0;
	
	@gmf.link(label="dependency", color="0,0,0", 
	tool.name = "Dependency", target.decoration="arrow")
	ref Requirement[*]#parents children;
	ref Requirement[*]#children parents;
	
	op void updateProgress();
}


@gmf.node(border.color="0,0,255")
class CustomerRequirement extends Requirement{
	@gmf.link(label="conflict", style="dash", color="0,0,255",
		tool.name="Customer Requirement Conflict")
	ref CustomerRequirement[*]#conflictsIncoming conflictsOutgoing;
	ref CustomerRequirement[*]#conflictsOutgoing conflictsIncoming;
}


@gmf.node(border.color="255,0,0")
class SystemRequirement extends Requirement{
	@gmf.link(label="conflict", style="dash", 
		tool.name="System Requirement Conflict", color="255,0,0")
	ref SystemRequirement[*]#conflictsIncoming conflictsOutgoing;
	ref SystemRequirement[*]#conflictsOutgoing conflictsIncoming;
}


@gmf.node(border.color="255,255,0")
class TestCase extends Identifiable, Describable{
	@gmf.link(label="verifies", color="255,255,0", 
		tool.name="Verifies")
	ref SystemRequirement[1..*]  requirements;
}


@gmf.node(border.color="0,255,0")
class TeamMember extends Identifiable{
	@gmf.link(label="assigned", color="0,255,0", 
		tool.name="Assigned")
	ref Requirement[*] requirements;
}